# The following types define the data model of the example service
# based on which the GraphQL API is generated

type User @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  name: String
  dateOfBirth: DateTime
  email: String

  address: String
  addressLat: String
  addressLong: String
  phoneNo: String
  imageUrl: String
  firebaseUserId: String! @isUnique
  gender: Gender
  access: AccessType @defaultValue(value: "CUSTOMER")
  buyPrescriptionRelation: BuyPrescriptionRelation @relation(name: "UserBuyPres")
  # Uncomment below - you can declare relations between models like this

  # posts: [Post!]! @relation(name: "UserPosts")
}

type BuyPrescriptionRelation @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  customer: User! @relation(name: "UserBuyPres")
  prescriptions: [Prescription!]! @relation(name: "BuyPrescriptions")
}

type Prescription @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!
  isDeleted: Boolean @defaultValue(value: "false")

  orderId: String!
  orderDate: String
  amount: Float @defaultValue(value: -1)
  prescriptionUrl: String
  billUrl: String
  status: StatusType @defaultValue(value: "PLACED")
  customerRelation: BuyPrescriptionRelation! @relation(name: "BuyPrescriptions")
  logs: [Log!]! @relation(name: "PrescriptionLogs")
}

type Log @model {
  id: ID! @isUnique
  createdAt: DateTime!
  updatedAt: DateTime!

  prescription: Prescription! @relation(name: "PrescriptionLogs")
  action: String
  oldStatus: StatusType
  newStatus: StatusType!
  user: User

}
# Uncomment the model below as well

# type Post @model {
#   id: ID! @isUnique
#   title: String!
#
#   # Every relation also required a back-relation (to determine 1:1, 1:n or n:m)
#   author: User! @relation(name: "UserPosts")
# }



enum Gender {
  MALE,
  FEMALE,
  OTHERS
}

enum AccessType {
    ADMIN,
    CUSTOMER,
    PHARMACIST
}

enum StatusType {
    PLACED,
    SHIPPED,
    DELIVERED,
    CANCELLED,
    REJECTED
}